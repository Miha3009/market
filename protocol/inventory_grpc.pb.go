// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: inventory.proto

package protocol

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvetroryClient is the client API for Invetrory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvetroryClient interface {
	CheckAvaliable(ctx context.Context, in *AvailabilityRequest, opts ...grpc.CallOption) (*AvailabilityResponse, error)
	Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error)
	CancelReserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type invetroryClient struct {
	cc grpc.ClientConnInterface
}

func NewInvetroryClient(cc grpc.ClientConnInterface) InvetroryClient {
	return &invetroryClient{cc}
}

func (c *invetroryClient) CheckAvaliable(ctx context.Context, in *AvailabilityRequest, opts ...grpc.CallOption) (*AvailabilityResponse, error) {
	out := new(AvailabilityResponse)
	err := c.cc.Invoke(ctx, "/market.Invetrory/CheckAvaliable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invetroryClient) Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error) {
	out := new(ReserveResponse)
	err := c.cc.Invoke(ctx, "/market.Invetrory/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invetroryClient) CancelReserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/market.Invetrory/CancelReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvetroryServer is the server API for Invetrory service.
// All implementations must embed UnimplementedInvetroryServer
// for forward compatibility
type InvetroryServer interface {
	CheckAvaliable(context.Context, *AvailabilityRequest) (*AvailabilityResponse, error)
	Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error)
	CancelReserve(context.Context, *ReserveRequest) (*empty.Empty, error)
	mustEmbedUnimplementedInvetroryServer()
}

// UnimplementedInvetroryServer must be embedded to have forward compatible implementations.
type UnimplementedInvetroryServer struct {
}

func (UnimplementedInvetroryServer) CheckAvaliable(context.Context, *AvailabilityRequest) (*AvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvaliable not implemented")
}
func (UnimplementedInvetroryServer) Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (UnimplementedInvetroryServer) CancelReserve(context.Context, *ReserveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReserve not implemented")
}
func (UnimplementedInvetroryServer) mustEmbedUnimplementedInvetroryServer() {}

// UnsafeInvetroryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvetroryServer will
// result in compilation errors.
type UnsafeInvetroryServer interface {
	mustEmbedUnimplementedInvetroryServer()
}

func RegisterInvetroryServer(s grpc.ServiceRegistrar, srv InvetroryServer) {
	s.RegisterService(&Invetrory_ServiceDesc, srv)
}

func _Invetrory_CheckAvaliable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvetroryServer).CheckAvaliable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Invetrory/CheckAvaliable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvetroryServer).CheckAvaliable(ctx, req.(*AvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invetrory_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvetroryServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Invetrory/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvetroryServer).Reserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invetrory_CancelReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvetroryServer).CancelReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.Invetrory/CancelReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvetroryServer).CancelReserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invetrory_ServiceDesc is the grpc.ServiceDesc for Invetrory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invetrory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.Invetrory",
	HandlerType: (*InvetroryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAvaliable",
			Handler:    _Invetrory_CheckAvaliable_Handler,
		},
		{
			MethodName: "Reserve",
			Handler:    _Invetrory_Reserve_Handler,
		},
		{
			MethodName: "CancelReserve",
			Handler:    _Invetrory_CancelReserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
