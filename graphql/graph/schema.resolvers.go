package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"strconv"

	"github.com/miha3009/market/graphql/graph/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *marketMutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	req, err := json.Marshal(input)
	if err != nil {
		return nil, err
	}

	resp, err := r.Client.R().SetHeader("Content-Type", "application/json").SetBody(req).Post(r.GetProductService() + "/api/product")
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	var res model.Product
	err = json.Unmarshal(resp.Body(), &res)
	return &res, err
}

// CreateOrder is the resolver for the createOrder field.
func (r *marketMutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.CreateOrderResponse, error) {
	req, err := json.Marshal(input)
	if err != nil {
		return nil, err
	}

	resp, err := r.Client.R().SetHeader("Content-Type", "application/json").SetBody(req).Post(r.GetOrderService() + "/api/order")
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	var res model.CreateOrderResponse
	err = json.Unmarshal(resp.Body(), &res)
	return &res, err
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *marketMutationResolver) UpdateProduct(ctx context.Context, input model.UpdatedProduct) (*model.Product, error) {
	req, err := json.Marshal(input)
	if err != nil {
		return nil, err
	}

	resp, err := r.Client.R().SetHeader("Content-Type", "application/json").SetBody(req).Put(r.GetProductService() + "/api/product")
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	var res model.Product
	err = json.Unmarshal(resp.Body(), &res)
	return &res, err
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *marketMutationResolver) DeleteProduct(ctx context.Context, id int) (*model.EmptyResponse, error) {
	resp, err := r.Client.R().Delete(r.GetProductService() + "/api/product/" + strconv.Itoa(id))
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	return &model.EmptyResponse{Result: true}, nil
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *marketMutationResolver) DeleteOrder(ctx context.Context, id string) (*model.EmptyResponse, error) {
	resp, err := r.Client.R().Delete(r.GetOrderService() + "/api/order/" + id)
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	return &model.EmptyResponse{Result: true}, nil
}

// GetProduct is the resolver for the getProduct field.
func (r *marketQueryResolver) GetProduct(ctx context.Context, id int) (*model.Product, error) {
	resp, err := r.Client.R().Get(r.GetProductService() + "/api/product/" + strconv.Itoa(id))
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	var res model.Product
	err = json.Unmarshal(resp.Body(), &res)
	return &res, err
}

// GetProductsList is the resolver for the getProductsList field.
func (r *marketQueryResolver) GetProductsList(ctx context.Context, limit int, offset int) (*model.ProductList, error) {
	resp, err := r.Client.R().Get(r.GetProductService() + "/api/product?limit=" + strconv.Itoa(limit) + "&offset=" + strconv.Itoa(offset))
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	var res model.ProductList
	err = json.Unmarshal(resp.Body(), &res)
	return &res, err
}

// GetOrder is the resolver for the getOrder field.
func (r *marketQueryResolver) GetOrder(ctx context.Context, id string) (*model.Order, error) {
	resp, err := r.Client.R().Get(r.GetOrderService() + "/api/order/" + id)
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	var res model.Order
	err = json.Unmarshal(resp.Body(), &res)
	return &res, err
}

// GetOrderByUser is the resolver for the getOrderByUser field.
func (r *marketQueryResolver) GetOrderByUser(ctx context.Context, userID int) ([]*model.Order, error) {
	resp, err := r.Client.R().Get(r.GetOrderService() + "/api/order?user=" + strconv.Itoa(userID))
	if err != nil {
		return nil, err
	}

	if resp.RawResponse.StatusCode != http.StatusOK {
		return nil, errors.New(resp.RawResponse.Status)
	}

	var res []*model.Order
	err = json.Unmarshal(resp.Body(), &res)
	return res, err
}

// MarketMutation returns MarketMutationResolver implementation.
func (r *Resolver) MarketMutation() MarketMutationResolver { return &marketMutationResolver{r} }

// MarketQuery returns MarketQueryResolver implementation.
func (r *Resolver) MarketQuery() MarketQueryResolver { return &marketQueryResolver{r} }

type marketMutationResolver struct{ *Resolver }
type marketQueryResolver struct{ *Resolver }
